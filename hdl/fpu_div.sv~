////////////////////////////////////////////////////////////////////////////////
// Company:        IIS @ ETHZ - Federal Institute of Technology               //
//                                                                            //
// Engineers:      h                  //
//                                                                            //
// Additional contributions by:                                               //
//                                                                            //
//                                                                            //
//                                                                            //
// Create Date:    29/11/2016                                                 // 
// Design Name:    FPU                                                        // 
// Module Name:    fpdiv.sv                                                   //
// Project Name:   Private FPU                                                //
// Language:       SystemVerilog                                              //
//                                                                            //
// Description:    Floating point division/square root                        //
//                 Adjusts exponents, adds/subtracts mantissas                //
//                 for Normalizer/Rounding stage                              //
//                                                                            //
// Revision:                                                                  //
//                                                                            //
//                                                                            //
//                                                                            //
//                                                                            //
//                                                                            //
//                                                                            //
//                                                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

import fpu_defs::*;

module nrsa_div
  (//Input
   input logic   clk,
   input logic   rstn,
   input logic        div_start ,
   input logic [n-1:0]    numerator,
   input logic [n-1:0]    denominator,

   //Output
   output logic        div_done,
   output logic  [n-1:0]   quotient
    );
   

     
   /////////////////////////////////////////////////////////////////////////////
   // Assign Inputs
   /////////////////////////////////////////////////////////////////////////////
  
assign denmonator_n=~denominator;
assign chosen_denominator=(|control_count?msv:0}?:denominator:denmonator_n; //???? also  can be chosen by div_start
assign 
   /////////////////////////////////////////////////////////////////////////////
   // control logic
   /////////////////////////////////////////////////////////////////////////////


   logic [4:0] control_count;
   logic [n-1:0] partical_remainder;
   

   
   always_ff @(posedge clk, negedge rstn) //control_FSM
     begin
        if (~rstn)
          begin
             control_count    <= 5'b00000;
          end
        else if(div_start) // one cycle start
          begin
              control_count    <= control_count+1;
          end
             else if (control_count==5'b01000) //the needed iteration number
               begin     
                  control_count    <= 5'b00000;
               end
                  else if(|control_count)
                     begin     
                        control_count    <= control_count+1;
                     end
                       else
                         begin
                           control_count    <= control_count;
                         end 
      
     end // always_ff
   


    



   /////////////////////////////////////////////////////////////////////////////
   // Mantissa operations
   /////////////////////////////////////////////////////////////////////////////

   logic                       Mant_agtb_S;
   logic [C_MANT_SHIFTIN-1:0]  Mant_shiftIn_D;
   logic [C_MANT_SHIFTED-1:0]  Mant_shifted_D;
   logic                       Mant_sticky_D;
   logic [C_MANT_SHIFTED-1:0]  Mant_unshifted_D;

   //Main Adder 
   logic [C_MANT_ADDIN-1:0]   Mant_addInA_D;
   logic [C_MANT_ADDIN-1:0]   Mant_addInB_D;
   logic [C_MANT_ADDOUT-1:0]  Mant_addOut_D;

   logic [C_MANT_PRENORM-1:0] Mant_prenorm_D;
   
   //Inversion and carry for Subtraction
   logic        Mant_addCarryIn_D;
   logic        Mant_invA_S;
   logic        Mant_invB_S;

   logic        Subtract_S;
   
   //Shift the number with the smaller exponent to the right
   assign Mant_agtb_S      = Mant_a_D > Mant_b_D;
   assign Mant_unshifted_D = {(Exp_agtb_S ? Mant_a_D : Mant_b_D), 3'b0};
   assign Mant_shiftIn_D   = {(Exp_agtb_S ? Mant_b_D : Mant_a_D), 2'b0};

   
   always_comb //sticky bit
     begin
        Mant_sticky_D = 1'b0;
        if (Exp_diff_D >= (C_MANT+3)) // 23 + guard, round, sticky
          Mant_sticky_D = | Mant_shiftIn_D;
        else
          Mant_sticky_D = | (Mant_shiftIn_D << ((C_MANT+3) - Exp_diff_D));
     end
   assign Mant_shifted_D = {(Mant_shiftIn_D >> Exp_diff_D), Mant_sticky_D};

   always_comb
     begin
        Mant_invA_S <= '0;
        Mant_invB_S <= '0;
        if (Subtract_S)
          begin
             if (Exp_agtb_S)
               Mant_invA_S <= 1'b1;
             else if (Exp_equal_S)
               begin
                 if (Mant_agtb_S)
                   Mant_invB_S <= 1'b1;
                 else
                   Mant_invA_S <= 1'b1;
               end
             else
               Mant_invA_S <= 1'b1;
          end // if (Subtract_S)
     end // always_comb begin
   
   assign Mant_addCarryIn_D = Subtract_S;
   assign Mant_addInA_D     = (Mant_invA_S) ? ~Mant_shifted_D   : Mant_shifted_D;
   assign Mant_addInB_D     = (Mant_invB_S) ? ~Mant_unshifted_D : Mant_unshifted_D;

   assign Mant_addOut_D     = Mant_addInA_D + Mant_addInB_D + Mant_addCarryIn_D;

   assign Mant_prenorm_D    = {(Mant_addOut_D[C_MANT_ADDOUT-1] & ~Subtract_S), Mant_addOut_D[C_MANT_ADDOUT-2:0], 20'b0};
   
   
   /////////////////////////////////////////////////////////////////////////////
   // Sign operations
   /////////////////////////////////////////////////////////////////////////////

   assign Subtract_S = Sign_a_D ^ Sign_b_D;
   
   always_comb
     begin
        Sign_norm_D <= 1'b0;
        if (Exp_agtb_S)
          Sign_norm_D <= Sign_a_D;
        else if (Exp_equal_S)
          begin
             if (Mant_agtb_S)
               Sign_norm_D <= Sign_a_D;
             else
               Sign_norm_D <= Sign_b_D;
          end
        else //Exp_a < Exp_b
          Sign_norm_D <= Sign_b_D;
     end

   
   /////////////////////////////////////////////////////////////////////////////
   // Output Assignments
   /////////////////////////////////////////////////////////////////////////////
   
   assign Sign_prenorm_DO = Sign_norm_D;
   assign Exp_prenorm_DO  = signed'({2'b0,Exp_prenorm_D});
   assign Mant_prenorm_DO = Mant_prenorm_D;
    
   
endmodule // fpadd
